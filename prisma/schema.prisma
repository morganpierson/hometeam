datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

//User = IC within a team including admin
model User {
  id                      String            @id @default(uuid())
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  clerkId                 String?            @unique
  email                   String?           @unique
  isAdmin                 Boolean?
  firstName                String? 
  lastName                String?
  role                    String?
  employmentStart         DateTime?
  employmentEnd           DateTime?
  availableForAcquisition Boolean           @default(false)
  companyId               String?
  teamId                  String?
  profileImage             String?
  
  resume                  String?
  referralsReceived       User[]            @relation("UserReferences")
  referralsProvided       User[]            @relation("UserReferences")
  team                    Team?             @relation(fields: [teamId], references: [id])
  acquisitionOffer        AcquisitionOffer?
  company                 Company?          @relation(fields: [companyId], references: [id])
  projects               Project[]         @relation("ProjectToUser")
  interestedCompanies    Company[]         @relation("CompanyCandidates")
  

  @@index([companyId])
  @@index([teamId])
}

//AcquisitionOffer = terms under which a company is offering up an employee or willing to release an employee
model AcquisitionOffer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  amount    Int? @default(0)
  offeringCompany Company @relation(fields: [offeringCompanyId], references: [id])
  offeringCompanyId String
  offerType String?
  user      User?    @relation(fields: [userId], references: [id])
  messageThread MessageThread? @relation("MessageThreadMessages")

  @@index([offeringCompanyId])
}

//MessageThread = thread of messages between two companies regarding acquisition offer
model MessageThread {
  id String @id @default(uuid())
  messages OfferMessage[] @relation("MessageThreadMessages")
  offer     AcquisitionOffer    @relation("MessageThreadMessages", fields: [offerId], references: [id])
  offerId String @unique
  companies Company[] @relation("MessageThreadCompanies")
  
  
}

//OfferMessage = Message from one company to another regarding the acquisition of an employee
model OfferMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sendingCompanyId    String
  receivingCompanyId String
  message   String
  sendingCompany      Company    @relation("MessageFromCompany", fields: [sendingCompanyId], references: [id])
  receivingCompany Company @relation("MessageToCompany", fields: [receivingCompanyId], references: [id])
    thread  MessageThread @relation("MessageThreadMessages", fields: [threadId], references: [id])
    threadId String
  
    @@index([receivingCompanyId]) 
    @@index([sendingCompanyId])
    @@index([threadId])
}


//Company = Company under which many Users & Teams work. Companies create AcquisitionOffers
model Company {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  name              String
  size              String
  employees         User[]         
  industries        Industry[]
  teams             Team[]
  projects          Project[]
  logo              String?
  website           String?
  savedCandidates   User[]             @relation("CompanyCandidates")
  sentMessages OfferMessage[] @relation("MessageFromCompany")
  receivedMessage OfferMessage[] @relation("MessageToCompany")
  messageThreads MessageThread[] @relation("MessageThreadCompanies")
  acquisitionOffers AcquisitionOffer[]
}



//Teams are subset of Company. Teams produce projects with ICs
model Team {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  companyId String?
  members   User[]
  projects  Project[]
  company   Company?  @relation(fields: [companyId], references: [id])
  logo     String?
  @@index([companyId])
}

//Project = contributions by teams and ICs. Technical and non-technical
model Project {
  id             String   @id @default(uuid())
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  title          String
  businessWeight Int      @default(0)
  description    String   @db.Text
  teams          Team[]
  users          User[] @relation("ProjectToUser")
  company   Company?  @relation(fields: [companyId], references: [id]) 
   
  companyId String?
  @@index([companyId])
  }

//Industry = markets in which a company operates (e.g. SaaS, eCommerce, AI/ML). Companies can operate within multiple Industries
model Industry {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  companies Company[]
}

model CompanyToIndustry {
  A String
  B String

  @@unique([A, B], map: "_CompanyToIndustry_AB_unique")
  @@index([B], map: "_CompanyToIndustry_B_index")
  @@map("_CompanyToIndustry")
}

model ProjectToTeam {
  A String
  B String

  @@unique([A, B], map: "_ProjectToTeam_AB_unique")
  @@index([B], map: "_ProjectToTeam_B_index")
  @@map("_ProjectToTeam")
}

model UserReferences {
  A String
  B String

  @@unique([A, B], map: "_UserReferences_AB_unique")
  @@index([B], map: "_UserReferences_B_index")
  @@map("_UserReferences")
}
